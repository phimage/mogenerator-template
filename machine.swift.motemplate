// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.swift instead.

import CoreData
import QueryKit

<$if noninheritedAttributes.@count > 0$>
enum <$managedObjectClassName$>Attributes: String {<$foreach Attribute noninheritedAttributes do$>
    case <$Attribute.name$> = "<$Attribute.name$>"<$endforeach do$>
}
<$endif$>

<$if noninheritedRelationships.@count > 0$>
enum <$managedObjectClassName$>Relationships: String {<$foreach Relationship noninheritedRelationships do$>
    case <$Relationship.name$> = "<$Relationship.name$>"<$endforeach do$>
}
<$endif$>

<$if noninheritedFetchedProperties.@count > 0$>
enum <$managedObjectClassName$>FetchedProperties: String {<$foreach FetchedProperty noninheritedFetchedProperties do$>
    case <$FetchedProperty.name$> = "<$FetchedProperty.name$>"<$endforeach do$>
}
<$endif$>

<$if hasUserInfoKeys$>
enum <$managedObjectClassName$>UserInfo: String {<$foreach UserInfo userInfoKeyValues do$>
    case <$UserInfo.key$> = "<$UserInfo.key$>"<$endforeach do$>
}
<$endif$>

@objc
class _<$managedObjectClassName$>: <$customSuperentity$> {

    class func queryset(context:NSManagedObjectContext) -> QuerySet<<$managedObjectClassName$>> {
        return QuerySet<<$managedObjectClassName$>>(context, entityName)
    }

    class Attributes <$if hasCustomSuperentity$>: _<$customSuperentity$>.Attributes <$endif$>{
        <$if noninheritedAttributes.@count > 0$><$foreach Attribute noninheritedAttributes do$>
        static var <$Attribute.name$>:Attribute<<$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$endif$>> = Attribute<<$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$endif$>>("<$Attribute.name$>")
        <$endforeach do$><$endif$>

    <$if noninheritedRelationships.@count > 0$>
    <$foreach Relationship noninheritedRelationships do$>
    <$if Relationship.isToMany$>
        static var <$Relationship.name$>:Attribute<<$Relationship.immutableCollectionClassName$>> = Attribute<<$Relationship.immutableCollectionClassName$>>("<$Relationship.name$>")
    <$else$>
        static var <$Relationship.name$>:Attribute<<$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isOptional$>?<$endif$>> = Attribute<<$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isOptional$>?<$endif$>>("<$Relationship.name$>")
        <$endif$><$endforeach do$>
    <$endif$>
    }

    // MARK: - Class methods

    <$if hasCustomSuperentity$>override <$endif$>class var entityName:String {
        return "<$name$>"
    }

    <$if hasCustomSuperentity$>override <$endif$>class func entity(managedObjectContext: NSManagedObjectContext!) -> NSEntityDescription! {
        return NSEntityDescription.entityForName(self.entityName, inManagedObjectContext: managedObjectContext);
    }

    // MARK: - Life cycle methods

    override init(entity: NSEntityDescription, insertIntoManagedObjectContext context: NSManagedObjectContext!) {
        super.init(entity: entity, insertIntoManagedObjectContext: context)
    }

    convenience init(managedObjectContext: NSManagedObjectContext!) {
        let entity = _<$managedObjectClassName$>.entity(managedObjectContext)
        self.init(entity: entity, insertIntoManagedObjectContext: managedObjectContext)
    }

    // MARK: - Properties
<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
<$if Attribute.hasScalarAttributeType$>
<$if Attribute.isReadonly$>
    @NSManaged
    let <$Attribute.name$>: NSNumber?
<$else$>
    @NSManaged
    var <$Attribute.name$>: NSNumber?
<$endif$>

    var <$Attribute.name$>Value: <$Attribute.scalarAttributeType$>? {
        get {
            return self.<$Attribute.name$>?.<$Attribute.scalarAccessorMethodName$>
        }
<$if ! Attribute.isReadonly$>
        set {
            self.<$Attribute.name$> = newValue == nil ? nil : NSNumber(<$Attribute.scalarAttributeType.camelCaseString$>:newValue!)
        }
<$endif$>
    }

<$else$>
<$if Attribute.isReadonly$>
    @NSManaged
    let <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$endif$>
<$else$>
    @NSManaged
    var <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$endif$>
<$endif$>
<$endif$>
    // func validate<$Attribute.name.initialCapitalString$>(value: AutoreleasingUnsafePointer<AnyObject>, error: NSErrorPointer) {}
<$endif$>
<$endforeach do$>

    // MARK: - Relationships
<$foreach Relationship noninheritedRelationships do$>
<$if Relationship.isToMany$>
    @NSManaged
    var <$Relationship.name$>: <$Relationship.mutableCollectionClassName$>

<$else$>
    @NSManaged
    var <$Relationship.name$>: <$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isOptional$>?<$endif$>

    // func validate<$Relationship.name.initialCapitalString$>(value: AutoreleasingUnsafePointer<AnyObject>, error: NSErrorPointer) {}
<$endif$>
<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> AnyObject? {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> AnyObject? {
        let model = managedObjectContext.persistentStoreCoordinator().managedObjectModel()
        let substitutionVariables = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
            "<$Binding.name$>": <$Binding.name$>,
<$endforeach do2$><$endif$>        ]

        let fetchRequest = model.fetchRequestFromTemplateWithName("<$FetchRequest.name$>", substitutionVariables: substitutionVariables)
        assert(fetchRequest != nil, "Can't find fetch request named \"<$FetchRequest.name$>\".")

        var error: NSError? = nil
        var result: AnyObject? = nil
        let results = managedObjectContext.executeFetchRequest(fetchRequest, error: &error)

        if error != nil {
            outError.memory = error
        } else {
            switch results.count {
            case 0:
                // Nothing found matching the fetch request. That's cool, though: we'll just return nil.
                break
            case 1:
                result = results[0]
            default:
                NSLog("WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %lu found (substitutionVariables:%@, results:%@)",
                    results.count,
                    substitutionVariables,
                    results)
            }
        }

        return result
    }
<$else$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> [AnyObject] {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> [AnyObject] {
        let model = managedObjectContext.persistentStoreCoordinator.managedObjectModel
        let substitutionVariables = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
            "<$Binding.name$>": <$Binding.name$>,
<$endforeach do2$><$else$>:<$endif$>]

        let fetchRequest = model.fetchRequestFromTemplateWithName("<$FetchRequest.name$>", substitutionVariables: substitutionVariables)
        assert(fetchRequest != nil, "Can't find fetch request named \"<$FetchRequest.name$>\".")

        var error: NSError? = nil
        let results = managedObjectContext.executeFetchRequest(fetchRequest, error: &error)

        if error != nil {
            outError.memory = error
        }

        return results
    }
<$endif$>
<$endforeach do$>

<$foreach FetchedProperty noninheritedFetchedProperties do$>
    @NSManaged
    let <$FetchedProperty.name$>: [<$FetchedProperty.entity.managedObjectClassName$>]
<$endforeach do$>
}

<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
extension _<$managedObjectClassName$> {

    func add<$Relationship.name.initialCapitalString$>(objects: <$Relationship.immutableCollectionClassName$>) {
        self.willChangeValueForKey("<$Relationship.name$>")
        self.<$Relationship.name$>.union<$if Relationship.jr_isOrdered$>Ordered<$endif$>Set(objects)
        self.didChangeValueForKey("<$Relationship.name$>")
    }

    func remove<$Relationship.name.initialCapitalString$>(objects: <$Relationship.immutableCollectionClassName$>) {
        self.willChangeValueForKey("<$Relationship.name$>")
        self.<$Relationship.name$>.minus<$if Relationship.jr_isOrdered$>Ordered<$endif$>Set(objects)
        self.didChangeValueForKey("<$Relationship.name$>")
    }

    func clear<$Relationship.name.initialCapitalString$>() {
        self.willChangeValueForKey("<$Relationship.name$>")
        self.<$Relationship.name$>.removeAllObjects()
        self.didChangeValueForKey("<$Relationship.name$>")
    }

    func add<$Relationship.destinationEntity.managedObjectClassName$>Object(value: <$Relationship.destinationEntity.managedObjectClassName$>) {
        let indexes = NSIndexSet(index: self.<$Relationship.name$>.count)
        self.willChange(NSKeyValueChange.Insertion, valuesAtIndexes: indexes, forKey:"<$Relationship.name$>")
        self.<$Relationship.name$>.addObject(value)
        self.didChange(NSKeyValueChange.Insertion, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
    }

    func remove<$Relationship.destinationEntity.managedObjectClassName$>Object(value: <$Relationship.destinationEntity.managedObjectClassName$>) {
        self.willChangeValueForKey("<$Relationship.name$>")
        self.<$Relationship.name$>.removeObject(value)
        self.didChangeValueForKey("<$Relationship.name$>")
    }
<$if Relationship.jr_isOrdered$>
    func insertObject(value: <$Relationship.destinationEntity.managedObjectClassName$>, in<$Relationship.name.initialCapitalString$>AtIndex idx: Int) {
        let indexes = NSIndexSet(index:idx)
        self.willChange(NSKeyValueChange.Insertion, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
        self.<$Relationship.name$>.insertObject(value, atIndex:idx)
        self.didChange(NSKeyValueChange.Insertion, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
    }

    func removeObjectFrom<$Relationship.name.initialCapitalString$>AtIndex(idx: Int) {
        let indexes = NSIndexSet(index:idx)
        self.willChange(NSKeyValueChange.Removal, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
        self.<$Relationship.name$>.removeObjectAtIndex(idx)
        self.didChange(NSKeyValueChange.Removal, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
    }

    func insert<$Relationship.name.initialCapitalString$>(value: [<$Relationship.destinationEntity.managedObjectClassName$>], atIndexes indexes: NSIndexSet) {
        self.willChange(NSKeyValueChange.Insertion, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
        self.<$Relationship.name$>.insertObjects(value, atIndexes:indexes)
        self.didChange(NSKeyValueChange.Insertion, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
    }

    func remove<$Relationship.name.initialCapitalString$>AtIndexes(indexes: NSIndexSet) {
        self.willChange(NSKeyValueChange.Removal, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
        self.<$Relationship.name$>.removeObjectsAtIndexes(indexes)
        self.didChange(NSKeyValueChange.Removal, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
    }

    func replaceObjectIn<$Relationship.name.initialCapitalString$>AtIndex(idx: Int, withObject value: <$Relationship.destinationEntity.managedObjectClassName$>) {
        let indexes = NSIndexSet(index:idx)
        self.willChange(NSKeyValueChange.Replacement, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
        self.<$Relationship.name$>.replaceObjectAtIndex(idx, withObject:value)
        self.didChange(NSKeyValueChange.Replacement, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
    }

    func replace<$Relationship.name.initialCapitalString$>AtIndexes(indexes: NSIndexSet, with<$Relationship.name.initialCapitalString$> value : [<$Relationship.destinationEntity.managedObjectClassName$>]){
        self.willChange(NSKeyValueChange.Replacement, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
        self.<$Relationship.name$>.replaceObjectsAtIndexes(indexes, withObjects:value)
        self.didChange(NSKeyValueChange.Replacement, valuesAtIndexes:indexes, forKey:"<$Relationship.name$>")
    }
<$endif$>

}
<$endif$><$endforeach do$>